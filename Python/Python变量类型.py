#!/usr/bin/python
# -*- coding: UTF-8 -*-
# 文件名：Python变量类型


# Python变量类型
'''
变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。
基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。
因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。
'''

# 变量赋值
'''
python中的变量赋值不需要类型声明
每个变量在内存中创建，都包括变量的标识，名称和数据这些信息
每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建
等号（=）用来给变量赋值
等号（=）运算符左边是一个变量名，等号（=）右边是存储在变量中的值
'''
# counter = 100
# miles = 10.3
# name = "John"
# print counter,miles,name


# # 多个变量赋值
# # Python允许同时给多个变量赋值
# a = b = c = 1
# # 以上实例，创建一个整形对象，值为1，三个变量被分配在相同的内存空间上。您也可以为多个对象指定多个变量。
# a , b, c = 1,2,"John"
# # 以上实例，两个整形对象1和2分配给变量a和b，字符串Jhon分配给变量c


# 标准数据类型
# 在内存中存储的数据可以有多种类型。
# 例如，一个人的年龄可以用数字来存储，他的名字可以使用字符存储。python定义了一些标准类型，用于存储各种类型的数据
'''
Number：数字
String：字符串
List：列表
Tuple：元组
Dictionary：字典
'''


# python数字
'''
数字数据类型用于存储数值。
他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。
当你指定一个值时，Number对象就会被创建：

您可以通过使用del语句删除单个或多个对象的引用。例如：

Python支持四种不同的数字类型：
int（有符号整型）
long（长整型[也可以代表八进制和十六进制]）
float（浮点型）
complex（复数）

长整型也可以使用小写 l，但是还是建议您使用大写 L，避免与数字 1 混淆。Python使用 L 来显示长整型。
Python 还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj,或者 complex(a,b) 表示， 
复数的实部 a 和虚部 b 都是浮点型
'''
# var1 = 1
# print var1
# del var1
# print var1


# python字符串
'''
字符串或串(String)是由数字、字母、下划线组成的一串字符。
它是编程语言中表示文本的数据类型。
python的字串列表有2种取值顺序:
1、从左到右索引默认0开始的，最大范围是字符串长度少1
2、从右到左索引默认-1开始的，最大范围是字符串开头
如果你要实现从字符串中获取一段子字符串的话，可以使用变量 [头下标:尾下标]，就可以截取相应的字符串，其中下标是从 0 
开始算起，可以是正数或负数，下标可以为空表示取到头或尾。
当使用以冒号分隔的字符串，python返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。
上面的结果包含了s[1]的值l，而取到的最大范围不包括上边界，就是s[5]的值p。
加号（+）是字符串连接运算符，星号（*）是重复操作。如下实例：
'''
# s = "i love python"
# s1 = s[3:7]
# print s,s[2:5],s1


# python列表
'''
List列表是python中最频繁的数据类型。
列表可以完成大多数集合类的数据结构实现，它支持字符，数字，字符串甚至可以包含列表（即嵌套）
列表使用[]标识是python最通用的复合数据类型
列表中值的切割也可以用到变量[头下标:尾下标]，就可以截取响应的列表，从左到右索引默认从0开始，从右到左索引默认-1开始，下标可以为空表示取到头或者尾。
加号是连接运算符，*是重复操作
'''
# list = ["1313",313,"gaoguangxiao"]
# print list
# print list[0]
# print list[1:]


# Python元组
'''
元组是另一个数据类型，类似于List（列表）。
元组用()标识，内部元素用逗号隔开，但是元祖不能二次赋值，相当于可读列表
'''
# tuple = (1231,"2424")
# print tuple
# print tuple[0:1]


# python字典
'''
字典是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合，
两者之间的区别在于：字典当中的元素是通过键值存取，而不是通过偏移存取
字典用{}标识，字典由索引（key）和它对应的值value组成
'''
# dic = {}
# dic["one"] = "A Apple"
# print dic


# python数据类型转换
'''
有时候，我们需要对数据内置的类型进行转换，你只需要将数据类型作为函数名即可。
'''
# x = 12.4
# y = int(x)
# print y



